# ToPlaycanvasPlugin
# Initial code generated by Softimage SDK Wizard
# Executed Mon May 24 19:40:44 UTC+0500 2021 by Shekn
#
# Tip: To add a command to this plug-in, right-click in the
# script editor and choose Tools > Add Command.
from win32com.client import constants
import sys
import os
if __sipath__ not in sys.path:
    sys.path.append(__sipath__)
from io_process import write_polygons_to_file, write_polygons_to_bin_file
from mesh_process import read_polygon_structure
from execute_navmesh import get_navmesh, get_navmesh_id, build_navmesh
from executes_material import join_by_materials
from execute_lightmaps import bake_lightmaps
from execute_lightprobes import bake_probes, create_probes

null = None
false = 0
true = 1
app = Application
math_pi = 3.1415926535

partition_enum = ["Watershed", 0, "Monotone", 1, "Layers", 2]
dimensions_enum = ["3d (XYZ)", 0, "2d (XZ)", 1]
bake_enum = ["Combined", 0, "Indirect Maps", 1, "Diffuse Indirect", 2]
baking_sizes = ["32x32", 0,
                "64x64", 1,
                "128x128", 2,
                "256x256", 3,
                "512x512", 4,
                "1024x1024", 5,
                "2048x2048", 6,
                "4096x4096", 7,
                "8192x8192", 8,
                "16384x16384", 9,
                "32768x32768", 10]

baking_extensions = ["PNG - Portable Network Graphics", "png",
                     "TIFF - Tagged Image File Format", "tiff",
                     "EXR - OpenEXR", "exr",
                     "BMP - Bitmap Picture", "bmp",
                     "JPEG - Joint Photographic Experts Group", "jpg",
                     "HDR - High Dynamic Range", "hdr",
                     ]


def log(message):
    app.LogMessage(message)


def XSILoadPlugin(in_reg):
    in_reg.Author = "Shekn"
    in_reg.Name = "ToPlaycanvasPlugin"
    in_reg.Major = 1
    in_reg.Minor = 0

    in_reg.RegisterProperty("BuildNavmeshProperty")
    in_reg.RegisterCommand("BuildNavmeshOpen", "BuildNavmeshOpen")
    in_reg.RegisterMenu(constants.siMenuMainFileExportID, "To Playcanvas", True, False)

    in_reg.RegisterProperty("BakeLightmapsProperty")
    in_reg.RegisterCommand("BakeLightmapsOpen", "BakeLightmapsOpen")
    in_reg.RegisterCommand("JoinByMaterials", "JoinByMaterials")
    in_reg.RegisterCommand("BakeLightmaps", "BakeLightmaps")
    in_reg.RegisterCommand("CreateProbes", "CreateProbes")
    in_reg.RegisterCommand("BakeProbes", "BakeProbes")
    # RegistrationInsertionPoint - do not remove this line

    return true


def ToPlaycanvas_Init(in_ctxt):
    oMenu = in_ctxt.Source
    oMenu.AddCommandItem("Navmesh Export...", "BuildNavmeshOpen")
    oMenu.AddCommandItem("Lightmap Baking...", "BakeLightmapsOpen")
    return True


def XSIUnloadPlugin(in_reg):
    strPluginName = in_reg.Name
    app.LogMessage(str(strPluginName) + str(" has been unloaded."), constants.siVerbose)
    return true


def BuildNavmeshProperty_OnClosed():
    oScnRoot = app.ActiveProject2.ActiveScene.Root
    try:
        app.DeleteObj(oScnRoot.Properties("BuildNavmeshProperty"))
    except:
        log("Could not delete BuildNavmesh property")
    return True


def BakeLightmapsProperty_OnClosed():
    oScnRoot = app.ActiveProject2.ActiveScene.Root
    try:
        app.DeleteObj(oScnRoot.Properties("BakeLightmapsProperty"))
    except:
        log("Could not delete BakeLightmaps property")
    return True


def BuildNavmeshOpen_Execute():
    app.LogMessage("BuildNavmeshOpen_Execute called", constants.siVerbose)

    oScnRoot = app.ActiveProject2.ActiveScene.Root
    oProp = oScnRoot.AddProperty("BuildNavmeshProperty", False, "BuildNavmeshProperty")
    app.InspectObj(oProp, "", "Build Navmesh", constants.siRecycle, False)
    return True


def BakeLightmapsOpen_Execute():
    app.LogMessage("BakeLightmapsOpen_Execute called", constants.siVerbose)

    oScnRoot = app.ActiveProject2.ActiveScene.Root
    oProp = oScnRoot.AddProperty("BakeLightmapsProperty", False, "BakeLightmapsProperty")
    app.InspectObj(oProp, "", "Bake Lightmaps", constants.siRecycle, False)
    return True


def BuildNavmeshProperty_OnInit():
    BuildNavmeshUI()
    return True


def BakeLightmapsProperty_OnInit():
    BakeLightmapsUI()
    return True


def BuildNavmeshProperty_Define(in_ctxt):
    oProp = in_ctxt.Source
    oProp.AddParameter2("cellSize", constants.siFloat, 0.3, 0.0, 1024.0, 0.0, 1.0, False, False)
    oProp.AddParameter2("cellHeight", constants.siFloat, 0.2, 0.0, 1024.0, 0.0, 1.0, False, False)
    oProp.AddParameter2("agentHeight", constants.siFloat, 2.0, 0.0, 1024.0, 0.0, 4.0, False, False)
    oProp.AddParameter2("agentRadius", constants.siFloat, 0.6, 0.0, 1024.0, 0.0, 2.0, False, False)
    oProp.AddParameter2("agentMaxClimb", constants.siFloat, 0.9, 0.0, 1024.0, 0.0, 2.0, False, False)
    oProp.AddParameter2("agentMaxSlope", constants.siFloat, 45.0, 0.0, 90.0, 0.0, 90.0, False, False)
    oProp.AddParameter2("regionMinSize", constants.siFloat, 8.0, 0.0, 1024.0, 0.0, 12.0, False, False)
    oProp.AddParameter2("regionMergeSize", constants.siFloat, 20.0, 0.0, 2048.0, 0.0, 36.0, False, False)
    oProp.AddParameter2("edgeMaxLen", constants.siFloat, 12.0, 0.0, 1024.0, 0.0, 24.0, False, False)
    oProp.AddParameter2("edgeMaxError", constants.siFloat, 1.3, 0.0, 1024.0, 0.0, 2.0, False, False)
    oProp.AddParameter2("vertsPerPoly", constants.siInt4, 6, 3, 256, 0, 12)
    oProp.AddParameter2("detailSampleDist", constants.siFloat, 6.0, 0.0, 1024.0, 0.0, 12.0, False, False)
    oProp.AddParameter2("detailSampleMaxError", constants.siFloat, 1.0, 0.0, 1024.0, 0.0, 2.0, False, False)

    oProp.AddParameter3("partition", constants.siInt4, 0, 0, 2, False, False)

    oProp.AddParameter3("export_dimensions", constants.siInt4, 0, 0, 1, False, False)
    oProp.AddParameter2("export_compensate_y", constants.siFloat, 0.0, -1024.0, 1024.0, -1.0, 1.0, False, False)
    oProp.AddParameter3("export_text", constants.siString, "", "", "", False, False)
    oProp.AddParameter3("export_binary", constants.siString, "", "", "", False, False)
    oProp.AddParameter3("text_to_bin", constants.siBool, True)

    oProp.AddParameter3("gen_triangulation", constants.siBool, False)


def BakeLightmapsProperty_Define(in_ctxt):
    o_prop = in_ctxt.Source
    o_prop.AddParameter3("join_pack", constants.siBool, True)
    o_prop.AddParameter3("bake_mode", constants.siInt4, 2)
    o_prop.AddParameter3("bake_size", constants.siInt4, 5)
    o_prop.AddParameter3("bake_directory", constants.siString, "")
    o_prop.AddParameter3("bake_extension", constants.siString, "png")
    # o_prop.AddParameter2("bake_gamma", constants.siFloat, 2.2, 0.0, 1024.0, 1.0, 4.0, True, True)
    o_prop.AddParameter3("bake_srgb", constants.siBool, True)
    o_prop.AddParameter2("bake_padding", constants.siInt4, 4, 0, 1024, 0, 8, True, True)
    o_prop.AddParameter3("bake_denoise", constants.siBool, True)

    o_prop.AddParameter2("probes_density", constants.siFloat, 0.5, 0.0, 1024.0, 0.1, 16.0, True, True)
    o_prop.AddParameter2("probe_generate_iterations", constants.siInt4, 20, 1, 1024, 1, 50, True, True)
    o_prop.AddParameter2("probe_shape_radius", constants.siFloat, 0.2, 0.0, 1024.0, 0.1, 1.0, True, True)
    o_prop.AddParameter2("probe_shape_subdivs", constants.siInt4, 16, 3, 1024, 8, 24, True, True)
    o_prop.AddParameter2("probe_shape_v_delta", constants.siFloat, 0.1, 0.0, 0.49, 0.05, 0.2, True, True)
    o_prop.AddParameter3("probes_bake_size", constants.siInt4, 4)
    o_prop.AddParameter2("probes_bake_padding", constants.siInt4, 4, 0, 1024, 1, 16)
    # o_prop.AddParameter2("probes_bake_gamma", constants.siFloat, 1.0, 0.0, 1024.0, 0.2, 4.0, True, True)
    o_prop.AddParameter3("probes_bake_srgb", constants.siBool, True)
    o_prop.AddParameter3("probes_bake_directory", constants.siString, "")
    o_prop.AddParameter3("probes_bake_extension", constants.siString, "png")
    o_prop.AddParameter3("probes_bake_json", constants.siString, "probes_data")


def BuildNavmeshUI():
    oLayout = PPG.PPGLayout
    oLayout.Clear()

    oLayout.AddTab("Generation")

    oLayout.AddGroup("Voxels")
    oLayout.AddItem("cellSize", "Cell Size")
    oLayout.AddItem("cellHeight", "Cell Height")
    oLayout.EndGroup()

    oLayout.AddGroup("Agent Parameters")
    oLayout.AddItem("agentHeight", "Agent Height")
    oLayout.AddItem("agentRadius", "Agent Radius")
    oLayout.AddItem("agentMaxClimb", "Agent Maximum Climb")
    oLayout.AddItem("agentMaxSlope", "Agent Maximum Slope")
    oLayout.EndGroup()

    oLayout.AddGroup("Mesh")
    oLayout.AddEnumControl("partition", partition_enum, "Partition")
    oLayout.AddItem("regionMinSize", "Region Minimum Size")
    oLayout.AddItem("regionMergeSize", "Region Merge Size")
    oLayout.AddItem("edgeMaxLen", "Edge Maximum Length")
    oLayout.AddItem("edgeMaxError", "Edge Maximum Error")
    oLayout.AddItem("vertsPerPoly", "Vertices Per-Polygon")
    oLayout.AddItem("detailSampleDist", "Detail Sample Distance")
    oLayout.AddItem("detailSampleMaxError", "Detail Sample Maximum Error")
    oLayout.EndGroup()

    oLayout.AddGroup("Generation")
    oLayout.AddItem("gen_triangulation", "Triangulation")
    oLayout.EndGroup()

    oLayout.AddButton("Build", "Build Navmesh")

    oLayout.AddTab("Export")
    oLayout.AddGroup("Binaries")
    oLayout.AddItem("export_binary", "Binary File", constants.siControlFilePath)
    oLayout.AddButton("ExportBinary", "Export Binary")
    oLayout.EndGroup()

    oLayout.AddGroup("Text Format")
    oLayout.AddItem("export_text", "Text File", constants.siControlFilePath)
    oLayout.AddEnumControl("export_dimensions", dimensions_enum, "Dimensions")
    oLayout.AddItem("export_compensate_y", "Add to Y for Compensate")
    oLayout.AddRow()
    oLayout.AddButton("ExportText", "Export Text File")
    oLayout.AddButton("ExportSelectedText", "Export Selected")
    oLayout.AddItem("text_to_bin", "Is Binary")
    oLayout.EndRow()
    oLayout.EndGroup()

    oLayout.AddButton("Build", "Build Navmesh")

    PPG.Refresh()


def BakeLightmapsUI():
    project_path = app.ActiveProject3()

    oProp = PPG.Inspected(0)
    oLayout = PPG.PPGLayout
    oLayout.Clear()
    oLayout.AddGroup("Join by Materials")
    oLayout.AddItem("join_pack", "Re-pack uvs")
    oLayout.AddButton("Join", "Join Selection")
    oLayout.EndGroup()

    oLayout.AddGroup("Baking Probes")
    oLayout.AddGroup("Generate")
    oLayout.AddItem("probes_density", "Density")
    oLayout.AddItem("probe_generate_iterations", "Generate Iterations")
    oLayout.EndGroup()

    oLayout.AddGroup("Shape")
    oLayout.AddItem("probe_shape_radius", "Radius")
    oLayout.AddItem("probe_shape_subdivs", "Sphere Subdivs")
    oLayout.AddItem("probe_shape_v_delta", "V Delta")
    oLayout.EndGroup()

    oLayout.AddGroup("Bake")
    oLayout.AddEnumControl("probes_bake_size", baking_sizes, "Map Size")
    oLayout.AddItem("probes_bake_padding", "Islands Padding")
    # oLayout.AddItem("probes_bake_gamma", "Gamma")
    oLayout.AddItem("probes_bake_srgb", "Apply sRGB")
    folder_path = oProp.Parameters("probes_bake_directory").Value
    if len(folder_path) == 0:
        oProp.Parameters("probes_bake_directory").Value = project_path + "\\Render_Pictures\\baked_lightmaps"
    oLayout.AddItem("probes_bake_directory", "Folder", constants.siControlFolder)
    oLayout.AddEnumControl("probes_bake_extension", baking_extensions, "Ext")
    oLayout.AddItem("probes_bake_json", "JSON Name")
    oLayout.EndGroup()
    oLayout.AddRow()
    oLayout.AddButton("CreateProbes", "Build Probes")
    oLayout.AddButton("BakeProbes", "Bake Probes")
    oLayout.EndRow()
    oLayout.EndGroup()

    oLayout.AddGroup("Baking Lightmaps")
    oLayout.AddEnumControl("bake_mode", bake_enum, "Baking Mode")
    oLayout.AddEnumControl("bake_size", baking_sizes, "Max Map Size")
    # bake_directory
    folder_path = oProp.Parameters("bake_directory").Value
    if len(folder_path) == 0:
        oProp.Parameters("bake_directory").Value = project_path + "\\Render_Pictures\\baked_lightmaps"
    oLayout.AddItem("bake_directory", "Folder", constants.siControlFolder)
    oLayout.AddEnumControl("bake_extension", baking_extensions, "Ext")
    # oLayout.AddItem("bake_gamma", "Gamma")
    oLayout.AddItem("bake_srgb", "Apply sRGB")
    oLayout.AddItem("bake_padding", "Padding")
    oLayout.AddItem("bake_denoise", "Denoise")
    oLayout.AddButton("BakeLightmap", "Bake Selection")
    oLayout.EndGroup()

    PPG.Refresh()


def BakeLightmapsProperty_Join_OnClicked():
    oProp = PPG.Inspected(0)
    app.JoinByMaterials(None, oProp.Parameters("join_pack").Value)


def BakeLightmapsProperty_BakeLightmap_OnClicked():
    oProp = PPG.Inspected(0)
    sel = app.Selection
    if len(sel) > 0:
        app.BakeLightmaps(sel,
                          oProp.Parameters("bake_mode").Value,
                          oProp.Parameters("bake_size").Value,
                          oProp.Parameters("bake_directory").Value,
                          oProp.Parameters("bake_extension").Value,
                          oProp.Parameters("bake_srgb").Value,
                          oProp.Parameters("bake_padding").Value,
                          oProp.Parameters("bake_denoise").Value)
    else:
        log("Select something to bake")


def BakeLightmapsProperty_CreateProbes_OnClicked():
    oProp = PPG.Inspected(0)
    sel = app.Selection
    base_object = None
    if sel is not None:
        if len(sel) == 1:
            base_object = sel[0]
        elif len(sel) == 0:
            pass
        else:
            log("For baking lightprobes select only one polygonmesh object or select nothing")
    if base_object is not None:
        app.CreateProbes(base_object,
                         oProp.Parameters("probes_density").Value,
                         oProp.Parameters("probe_generate_iterations").Value,
                         oProp.Parameters("probe_shape_radius").Value,
                         oProp.Parameters("probe_shape_subdivs").Value,
                         oProp.Parameters("probe_shape_v_delta").Value,
                         oProp.Parameters("probes_bake_size").Value,
                         oProp.Parameters("probes_bake_padding").Value,
                         oProp.Parameters("probes_bake_directory").Value,
                         oProp.Parameters("probes_bake_json").Value)


def BakeLightmapsProperty_BakeProbes_OnClicked():
    oProp = PPG.Inspected(0)
    sel = app.Selection
    if sel is not None:
        if len(sel) == 1:
            app.BakeProbes(sel[0],
                           oProp.Parameters("probes_bake_size").Value,
                           oProp.Parameters("probes_bake_srgb").Value,
                           oProp.Parameters("probes_bake_padding").Value,
                           oProp.Parameters("probes_bake_directory").Value,
                           oProp.Parameters("probes_bake_extension").Value,
                           oProp.Parameters("probes_bake_json").Value)
        else:
            log("Select one lightprobe object")


def BuildNavmeshProperty_Build_OnClicked():
    oProp = PPG.Inspected(0)
    root = app.ActiveProject2.ActiveScene.Root
    objects = root.FindChildren("", constants.siPolyMeshType)
    # here we should get all parameters and execute BuildNavmesh command
    build_navmesh(app,
                  objects,
                  oProp.Parameters("cellSize").Value,
                  oProp.Parameters("cellHeight").Value,
                  oProp.Parameters("partition").Value,
                  oProp.Parameters("agentHeight").Value,
                  oProp.Parameters("agentRadius").Value,
                  oProp.Parameters("agentMaxClimb").Value,
                  oProp.Parameters("agentMaxSlope").Value,
                  oProp.Parameters("regionMinSize").Value,
                  oProp.Parameters("regionMergeSize").Value,
                  oProp.Parameters("edgeMaxLen").Value,
                  oProp.Parameters("edgeMaxError").Value,
                  oProp.Parameters("vertsPerPoly").Value,
                  oProp.Parameters("detailSampleDist").Value,
                  oProp.Parameters("detailSampleMaxError").Value,
                  oProp.Parameters("gen_triangulation").Value)


def BuildNavmeshProperty_ExportBinary_OnClicked():
    oProp = PPG.Inspected(0)
    file_path = oProp.Parameters("export_binary").Value
    navmesh = get_navmesh()
    if len(file_path) == 0:
        log("Export Binary: set non-empty path to save")
    else:
        if navmesh is None:
            log("Export Binary: navmesh is empty, generate it at first")
        else:
            extension = os.path.splitext(file_path)[1]
            if extension != ".bin":
                file_path += ".bin"
            navmesh.save_navmesh(file_path)
            log("Export Binary: save binary to " + file_path)


def BuildNavmeshProperty_ExportSelectedText_OnClicked():
    prop = PPG.Inspected(0)
    selected = app.Selection
    gen_triangulation = prop.Parameters("gen_triangulation").Value
    dim_mode = prop.Parameters("export_dimensions").Value
    y_shift = prop.Parameters("export_compensate_y").Value
    file_path = prop.Parameters("export_text").Value
    text_to_bin = prop.Parameters("text_to_bin").Value
    if len(file_path) == 0:
        log("Export Selected Text: set non-empty path to save")
    else:
        if gen_triangulation:
            log("Export Selected Text: supports only polygonal mode")
        else:
            if len(selected) == 1:
                to_export_obj = selected[0]
                verts, polys, sizes = read_polygon_structure(to_export_obj)
                if text_to_bin:
                    with open(file_path, "wb") as file:
                        write_polygons_to_bin_file(verts, polys, sizes, y_shift, file)
                else:
                    with open(file_path, "w") as file:
                        write_polygons_to_file(verts, polys, sizes, [], dim_mode, gen_triangulation, y_shift, file)
            else:
                log("Export Selected Text: select exactly one polygonmesh object")


def BuildNavmeshProperty_ExportText_OnClicked():
    oProp = PPG.Inspected(0)
    file_path = oProp.Parameters("export_text").Value
    navmesh = get_navmesh()
    if len(file_path) == 0:
        log("Export Text: set non-empty path to save")
    else:
        if navmesh is None:
            log("Export Text: navmesh is empty, generate it at first")
        else:
            # we should write text to file
            with open(file_path, "w") as file:
                dim_mode = oProp.Parameters("export_dimensions").Value
                y_shift = oProp.Parameters("export_compensate_y").Value
                triangles = []
                if oProp.Parameters("gen_triangulation").Value:
                    verts, triangles = navmesh.get_navmesh_trianglulation()
                else:
                    navmesh_id = get_navmesh_id()
                    if navmesh_id is None:
                        verts, polys, sizes = navmesh.get_navmesh_poligonization()
                    else:
                        nm_obj = app.GetObjectFromID2(navmesh_id)
                        verts, polys, sizes = read_polygon_structure(nm_obj)
                write_polygons_to_file(verts, polys, sizes, triangles, dim_mode, oProp.Parameters("gen_triangulation").Value, y_shift, file)
            log("Export Text: save text to " + file_path)


def JoinByMaterials_Init(ctxt):
    command = ctxt.Source
    args = command.Arguments
    args.Add("objects")
    args.Add("join_pack", constants.siArgumentInput, True, constants.siBool)

    return True


def JoinByMaterials_Execute(*args):
    app.LogMessage("JoinByMaterials_Execute called", constants.siVerbose)

    objects = args[0]
    join_pack = args[1]
    join_by_materials(app, objects, join_pack)

    return True


def BakeLightmaps_Init(ctxt):
    command = ctxt.Source
    args = command.Arguments
    args.Add("objects")
    args.Add("mode", constants.siArgumentInput, 2, constants.siInt)  # 0 - full light, 1 - only indirect (with environment), 2 - diffuse indirect
    args.Add("bake_size", constants.siArgumentInput, 5, constants.siInt)
    args.Add("bake_directory", constants.siArgumentInput, "", constants.siString)
    args.Add("bake_extension", constants.siArgumentInput, "", constants.siString)
    args.Add("bake_srgb", constants.siArgumentInput, True, constants.siBool)
    args.Add("bake_padding", constants.siArgumentInput, 4, constants.siInt)
    args.Add("bake_denoise", constants.siArgumentInput, True, constants.siBool)

    return True


def BakeLightmaps_Execute(*args):
    app.LogMessage("BakeLightmaps_Execute called", constants.siVerbose)

    objects = args[0]
    mode = args[1]
    bake_size_index = args[2]  # in the ui enum
    bake_directory = args[3]
    bake_extension = args[4]
    bake_srgb = args[5]
    bake_padding = args[6]
    bake_denoise = args[7]
    bake_lightmaps(app, objects, mode, bake_size_index, bake_directory, bake_extension, bake_srgb, bake_padding, bake_denoise)

    return True


def CreateProbes_Init(ctxt):
    project_path = app.ActiveProject3()
    command = ctxt.Source
    args = command.Arguments
    args.Add("object")
    args.Add("probes_density", constants.siArgumentInput, 0.5, constants.siFloat)
    args.Add("probe_generate_iterations", constants.siArgumentInput, 20, constants.siInt)
    args.Add("probe_shape_radius", constants.siArgumentInput, 0.2, constants.siFloat)
    args.Add("probe_shape_subdivs", constants.siArgumentInput, 16, constants.siInt)
    args.Add("probe_shape_v_delta", constants.siArgumentInput, 0.1, constants.siFloat)
    args.Add("probes_bake_size", constants.siArgumentInput, 4, constants.siInt)
    args.Add("probes_bake_padding", constants.siArgumentInput, 4, constants.siInt)

    args.Add("probes_bake_directory", constants.siArgumentInput, project_path + "\\Render_Pictures\\baked_lightmaps", constants.siString)
    args.Add("probes_bake_json", constants.siArgumentInput, "probes_data", constants.siString)

    return True


def BakeProbes_Init(ctxt):
    project_path = app.ActiveProject3()
    command = ctxt.Source
    args = command.Arguments
    args.Add("object")
    args.Add("probes_bake_size", constants.siArgumentInput, 4, constants.siInt)
    args.Add("probes_bake_srgb", constants.siArgumentInput, True, constants.siBool)
    args.Add("probes_bake_padding", constants.siArgumentInput, 4, constants.siInt)

    args.Add("probes_bake_directory", constants.siArgumentInput, project_path + "\\Render_Pictures\\baked_lightmaps", constants.siString)
    args.Add("probes_bake_extension", constants.siArgumentInput, "exr", constants.siString)
    args.Add("probes_bake_json", constants.siArgumentInput, "probes_data", constants.siString)

    return True


def BakeProbes_Execute(*args):
    obj = args[0]
    probes_bake_size = args[1]
    probes_bake_srgb = args[2]
    probes_bake_padding = args[3]
    probes_bake_directory = args[4]
    probes_bake_extension = args[5]
    probes_bake_json = args[6]

    bake_probes(app, obj, probes_bake_size, probes_bake_srgb, probes_bake_padding, probes_bake_directory, probes_bake_extension, probes_bake_json)


def CreateProbes_Execute(*args):
    base_object = args[0]
    probes_density = args[1]
    probe_generate_iterations = args[2]
    probe_shape_radius = args[3]
    probe_shape_subdivs = args[4]
    probe_shape_v_delta = args[5]
    probes_bake_size = args[6]
    probes_bake_padding = args[7]
    probes_bake_directory = args[8]
    probes_bake_json = args[9]

    create_probes(app,
                  base_object,
                  probes_density,
                  probe_generate_iterations,
                  probe_shape_radius,
                  probe_shape_subdivs,
                  probe_shape_v_delta,
                  probes_bake_size,
                  probes_bake_padding,
                  probes_bake_directory,
                  probes_bake_json)
